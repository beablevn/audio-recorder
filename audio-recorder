<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Ghi Âm và Gửi Email</title>
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Josefin+Sans:wght@400&display=swap">
  <style>
    body {
      background-color: #E0ECF8;
      font-family: 'Josefin Sans', sans-serif;
      margin: 0;
      padding: 0;
    }

    .container {
      max-width: 600px;
      margin: 50px auto;
      background-color: #ffffff;
      border-radius: 10px;
      padding: 20px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    h1 {
      color: #333333;
      font-size: 24px;
      margin-bottom: 20px;
      text-align: center;
    }

    .button {
      display: inline-block;
      padding: 10px 20px;
      font-size: 16px;
      font-weight: bold;
      text-align: center;
      border-radius: 6px;
      cursor: pointer;
      border: none;
      color: #ffffff;
      transition: background-color 0.3s ease;
      margin-right: 10px;
    }

    .button-start {
      background-color: #5a5a5a;
    }

    .button-start:hover {
      background-color: #424242;
    }

    .button-submit {
      background-color: #333333;
    }

    .button-submit:disabled {
      background-color: #bbbbbb;
      cursor: not-allowed;
    }

    .button-submit:hover:not(:disabled) {
      background-color: #1a1a1a;
    }

    audio {
      display: block;
      width: 100%;
      margin: 20px 0;
    }

    label {
      display: block;
      margin-bottom: 5px;
      color: #333333;
      font-weight: bold;
    }

    input {
      width: calc(100% - 20px);
      padding: 10px;
      border-radius: 6px;
      border: 2px solid #dddddd;
      font-size: 16px;
      margin-bottom: 20px;
    }

    form {
      margin-top: 20px;
    }

    #error-message {
      color: red;
      font-size: 14px;
      text-align: center;
      margin-top: 10px;
    }
  </style>
</head>

<body>
  <div class="container">
    <h1>Ghi Âm và Gửi Email</h1>
    <button id="startRecording" class="button button-start">Bắt đầu ghi âm</button>
    <button id="stopRecording" class="button button-submit" disabled>Dừng ghi âm</button>
    <audio id="audioPlayback" controls></audio>
    <form id="emailForm">
      <label for="email">Nhập email nhận:</label>
      <input type="email" id="email" name="email" placeholder="Nhập email của bạn" required>
      <button type="submit" class="button button-submit" disabled>Gửi Ghi Âm</button>
    </form>
    <p id="error-message"></p>
  </div>

  <script>
    let mediaRecorder;
    let audioChunks = [];
    const startBtn = document.getElementById('startRecording');
    const stopBtn = document.getElementById('stopRecording');
    const audioPlayback = document.getElementById('audioPlayback');
    const emailForm = document.getElementById('emailForm');
    const emailInput = document.getElementById('email');
    const submitBtn = emailForm.querySelector('button');
    const errorMessage = document.getElementById('error-message');

    startBtn.addEventListener('click', async () => {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        mediaRecorder = new MediaRecorder(stream);

        mediaRecorder.start();
        audioChunks = [];

        mediaRecorder.ondataavailable = event => {
          audioChunks.push(event.data);
        };

        mediaRecorder.onstop = () => {
          const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
          const audioUrl = URL.createObjectURL(audioBlob);
          audioPlayback.src = audioUrl;
          submitBtn.disabled = false;
        };

        startBtn.disabled = true;
        stopBtn.disabled = false;
        errorMessage.textContent = '';
      } catch (error) {
        if (error.name === 'NotAllowedError') {
          errorMessage.textContent = 'Quyền micro bị từ chối. Vui lòng cấp quyền trong cài đặt trình duyệt.';
        } else if (error.name === 'NotFoundError') {
          errorMessage.textContent = 'Không tìm thấy thiết bị micro. Vui lòng kiểm tra kết nối.';
        } else {
          errorMessage.textContent = 'Lỗi không xác định: ' + error.message;
        }
      }
    });

    stopBtn.addEventListener('click', () => {
      mediaRecorder.stop();
      startBtn.disabled = false;
      stopBtn.disabled = true;
    });

    emailForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
      const email = emailInput.value;

      const formData = new FormData();
      formData.append('from', email);
      formData.append('to', 'example@example.com');
      formData.append('subject', 'Ghi Âm từ Người Dùng');
      formData.append('text', 'Đính kèm là ghi âm của bạn.');
      formData.append('audio', audioBlob, 'recording.wav');

      try {
        const response = await fetch('https://example.com/api/mail/send', {
          method: 'POST',
          body: formData
        });

        if (response.ok) {
          alert('Ghi âm đã được gửi thành công!');
        } else {
          alert('Đã xảy ra lỗi khi gửi ghi âm.');
        }
      } catch (error) {
        alert('Không thể gửi ghi âm: ' + error.message);
      }
    });
  </script>
</body>

</html>
